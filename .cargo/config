# Crank up optimization level of packages in critical paths of tests.
# This speeds up test execution substantially.
[profile.dev.package.adler]
opt-level = 3
[profile.test.package.adler]
opt-level = 3
[profile.dev.package.adler32]
opt-level = 3
[profile.test.package.adler32]
opt-level = 3
[profile.dev.package.byteorder]
opt-level = 3
[profile.test.package.byteorder]
opt-level = 3
[profile.dev.package.bzip2]
opt-level = 3
[profile.test.package.bzip2]
opt-level = 3
[profile.dev.package.crc32fast]
opt-level = 3
[profile.test.package.crc32fast]
opt-level = 3
[profile.dev.package.flate2]
opt-level = 3
[profile.test.package.flate2]
opt-level = 3
[profile.dev.package.libflate]
opt-level = 3
[profile.test.package.libflate]
opt-level = 3
[profile.dev.package.libflate_lz77]
opt-level = 3
[profile.test.package.libflate_lz77]
opt-level = 3
[profile.dev.package.miniz_oxide]
opt-level = 3
[profile.test.package.miniz_oxide]
opt-level = 3
[profile.dev.package.rle-decode-fast]
opt-level = 3
[profile.test.package.rle-decode-fast]
opt-level = 3
[profile.dev.package.serde_yaml]
opt-level = 3
[profile.test.package.serde_yaml]
opt-level = 3
[profile.dev.package.sha2]
opt-level = 3
[profile.test.package.sha2]
opt-level = 3
[profile.dev.package.yaml-rust]
opt-level = 3
[profile.test.package.yaml-rust]
opt-level = 3
[profile.dev.package.zip]
opt-level = 3
[profile.test.package.zip]
opt-level = 3
[profile.dev.package.zstd]
opt-level = 3
[profile.test.package.zstd]
opt-level = 3
[profile.dev.package.zstd-safe]
opt-level = 3
[profile.test.package.zstd-safe]
opt-level = 3
[profile.dev.package.zstd-sys]
opt-level = 3
[profile.test.package.zstd-sys]
opt-level = 3

# This configuration is copied from pyembed/.cargo/conf. See it for the
# rationale.
#
# The reason we have two copies is so `cargo` invocations from the workspace
# pick up these configs. Without them, we don't export symbols from generated
# binaries. And in the case of the pyembed crate, that means we can't run unit
# tests. This does mean that we will export symbols for other binaries in the
# workspace. This likely isn't desired. So packaging and releasing should invoke
# cargo outside of the workspace to prevent this behavior.

[target.i686-unknown-linux-gnu]
rustflags = ["-C", "link-args=-Wl,-export-dynamic"]

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "link-args=-Wl,-export-dynamic"]

[target.aarch64-unknown-linux-gnu]
rustflags = ["-C", "link-args=-Wl,-export-dynamic"]

[target.aarch64-apple-darwin]
rustflags = ["-C", "link-args=-rdynamic"]

[target.x86_64-apple-darwin]
rustflags = ["-C", "link-args=-rdynamic"]
